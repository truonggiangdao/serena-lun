{"version":3,"sources":["components/Content.js","components/TitleRed.js","components/TitleBlue.js","components/Title.js","DateHelper.js","App.js","serviceWorker.js","index.js"],"names":["children","className","text","DAYS","getDateString","d","getDay","getDate","getMonth","getFullYear","diffDates","dateThen","dateNow","totalDays","Math","floor","weeks","days","firstDate","Date","today","deliverDate","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SAGe,G,gBAAA,YAAmB,IAAhBA,EAAe,EAAfA,SAChB,OACE,yBAAKC,UAAU,WACZD,KCHQ,G,MAAA,YAAe,IAAZE,EAAW,EAAXA,KAChB,OACE,yBAAKD,UAAU,YACZC,KCHQ,G,MAAA,YAAe,IAAZA,EAAW,EAAXA,KAChB,OACE,yBAAKD,UAAU,aACZC,KCHQ,G,MAAA,YAAe,IAAZA,EAAW,EAAXA,KAChB,OACE,yBAAKD,UAAU,SACZC,KCNMC,EAAO,CAClB,KACA,aACA,aACA,aACA,aACA,aACA,cAKWC,EAAgB,SAACC,GAAD,gBAFP,SAACA,GAAD,OAAOF,EAAKE,EAAEC,UAG/BA,CAAOD,GADiB,qBACLA,EAAEE,UADG,YACUF,EAAEG,WAAW,EADvB,YAC4BH,EAAEI,gBAG9CC,EAAY,SAACC,EAAUC,GAClC,IAAMC,EAAYC,KAAKC,OAAOH,EAAUD,GAAX,OACvBK,EAAQF,KAAKC,MAAMF,EAAY,GAC/BI,EAAOJ,EAAY,EACzB,MAAM,GAAN,OAAUG,EAAV,uBAAyBC,EAAzB,aCZIC,EAAY,IAAIC,KAAK,4BACrBC,EAAQ,IAAID,KACZE,EAAc,IAAIF,KAAK,4BAkBdG,MAhBf,WACE,OACE,yBAAKrB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUC,KAAK,cACf,kBAAC,EAAD,CAAOA,KAAME,EAAcc,KAC3B,kBAAC,EAAD,CAAUhB,KAAK,uCACf,kBAAC,EAAD,CAAOA,KAAMQ,EAAUQ,EAAWE,KAClC,kBAAC,EAAD,CAAUlB,KAAK,yBACf,kBAAC,EAAD,CAAOA,KAAME,EAAciB,KAC3B,kBAAC,EAAD,CAAWnB,KAAM,oBAAcQ,EAAUU,EAAOC,QCVpCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9e8609da.chunk.js","sourcesContent":["import React from 'react';\nimport './Content.css';\n\nexport default ({ children }) => {\n  return (\n    <div className=\"Content\">\n      {children}\n    </div>\n  )\n};\n","import React from 'react';\nimport './TitleRed.css';\n\nexport default ({ text }) => {\n  return (\n    <div className=\"TitleRed\">\n      {text}\n    </div>\n  )\n};\n","import React from 'react';\nimport './TitleBlue.css';\n\nexport default ({ text }) => {\n  return (\n    <div className=\"TitleBlue\">\n      {text}\n    </div>\n  )\n};\n","import React from 'react';\nimport './Title.css';\n\nexport default ({ text }) => {\n  return (\n    <div className=\"Title\">\n      {text}\n    </div>\n  )\n};\n","export const DAYS = [\n  'CN',\n  'Thứ 2',\n  'Thứ 3',\n  'Thứ 4',\n  'Thứ 5',\n  'Thứ 6',\n  'Thứ 7',\n];\n\nexport const getDay = (d) => DAYS[d.getDay()];\n\nexport const getDateString = (d) => (\n  `${getDay(d)}, ngày ${d.getDate()}-${d.getMonth()+1}-${d.getFullYear()}`\n);\n\nexport const diffDates = (dateThen, dateNow) => {\n  const totalDays = Math.floor((dateNow - dateThen) / (24 * 60 * 60 * 1000));\n  const weeks = Math.floor(totalDays / 7);\n  const days = totalDays % 7;\n  return `${weeks} tuần, ${days} ngày`;\n};\n","import React from 'react';\nimport './App.css';\nimport Content from './components/Content';\nimport TitleRed from './components/TitleRed';\nimport TitleBlue from './components/TitleBlue';\nimport Title from './components/Title';\nimport { getDateString, diffDates } from './DateHelper';\n\nconst firstDate = new Date('2020-08-09T17:00:00.000Z');\nconst today = new Date();\nconst deliverDate = new Date('2021-05-19T17:00:00.000Z');\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Content>\n        <TitleRed text=\"Ngày 1\" />\n        <Title text={getDateString(firstDate)} />\n        <TitleRed text=\"Nay đã được\" />\n        <Title text={diffDates(firstDate, today)} />\n        <TitleRed text=\"Ngày dự sanh\" />\n        <Title text={getDateString(deliverDate)} />\n        <TitleBlue text={'Còn lại: ' + diffDates(today, deliverDate)} />\n      </Content>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}